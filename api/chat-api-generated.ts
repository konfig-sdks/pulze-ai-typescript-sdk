/* tslint:disable */
/* eslint-disable */
/*
Pulze.ai API

At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.

We are a VC Funded, early stage startup based in San Francisco.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompletionRequestPayload } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { PromptProperty } from '../models';
// @ts-ignore
import { PulzeEngineResponseChatCompletion } from '../models';
// @ts-ignore
import { RoleContentChatChoice } from '../models';
// @ts-ignore
import { StopProperty } from '../models';
// @ts-ignore
import { ToolChoiceProperty } from '../models';
// @ts-ignore
import { ToolFunction } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Perform a Chat Completion request.
         * @summary Chat Completions
         * @param {CompletionRequestPayload} completionRequestPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCompletionRequest: async (completionRequestPayload: CompletionRequestPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completionRequestPayload' is not null or undefined
            assertParamExists('performCompletionRequest', 'completionRequestPayload', completionRequestPayload)
            const localVarPath = `/v1/chat/completions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: completionRequestPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/chat/completions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(completionRequestPayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Perform a Chat Completion request.
         * @summary Chat Completions
         * @param {ChatApiPerformCompletionRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performCompletionRequest(requestParameters: ChatApiPerformCompletionRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PulzeEngineResponseChatCompletion>> {
            const completionRequestPayload: CompletionRequestPayload = {
                best_of: requestParameters.best_of,
                false: requestParameters.false,
                frequency_penalty: requestParameters.frequency_penalty,
                logit_bias: requestParameters.logit_bias,
                logprobs: requestParameters.logprobs,
                max_tokens: requestParameters.max_tokens,
                messages: requestParameters.messages,
                model: requestParameters.model,
                presence_penalty: requestParameters.presence_penalty,
                prompt: requestParameters.prompt,
                stop: requestParameters.stop,
                stream: requestParameters.stream,
                suffix: requestParameters.suffix,
                temperature: requestParameters.temperature,
                tool_choice: requestParameters.tool_choice,
                tools: requestParameters.tools,
                top_p: requestParameters.top_p
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performCompletionRequest(completionRequestPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Perform a Chat Completion request.
         * @summary Chat Completions
         * @param {ChatApiPerformCompletionRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCompletionRequest(requestParameters: ChatApiPerformCompletionRequestRequest, options?: AxiosRequestConfig): AxiosPromise<PulzeEngineResponseChatCompletion> {
            return localVarFp.performCompletionRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for performCompletionRequest operation in ChatApi.
 * @export
 * @interface ChatApiPerformCompletionRequestRequest
 */
export type ChatApiPerformCompletionRequestRequest = {
    
} & CompletionRequestPayload

/**
 * ChatApiGenerated - object-oriented interface
 * @export
 * @class ChatApiGenerated
 * @extends {BaseAPI}
 */
export class ChatApiGenerated extends BaseAPI {
    /**
     * Perform a Chat Completion request.
     * @summary Chat Completions
     * @param {ChatApiPerformCompletionRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public performCompletionRequest(requestParameters: ChatApiPerformCompletionRequestRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).performCompletionRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
