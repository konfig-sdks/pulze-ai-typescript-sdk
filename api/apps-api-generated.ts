/* tslint:disable */
/* eslint-disable */
/*
Pulze.ai API

At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.

We are a VC Funded, early stage startup based in San Francisco.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppUpdate } from '../models';
// @ts-ignore
import { AppWithModelUpdatesInfo } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LLMModelPolicies } from '../models';
// @ts-ignore
import { LLMModelWeights } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the App for the given API key.
         * @summary Get App For Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppForApiKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/apps/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/apps/self',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an App\'s properties: description, weights and policies.
         * @summary Update App And Models
         * @param {AppUpdate} appUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties: async (appUpdate: AppUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appUpdate' is not null or undefined
            assertParamExists('updateProperties', 'appUpdate', appUpdate)
            const localVarPath = `/v1/apps/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/apps/update',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the App for the given API key.
         * @summary Get App For Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppForApiKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppWithModelUpdatesInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppForApiKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an App\'s properties: description, weights and policies.
         * @summary Update App And Models
         * @param {AppsApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProperties(requestParameters: AppsApiUpdatePropertiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppWithModelUpdatesInfo>> {
            const appUpdate: AppUpdate = {
                description: requestParameters.description,
                id: requestParameters.id,
                policies: requestParameters.policies,
                prompt_id: requestParameters.prompt_id,
                weights: requestParameters.weights
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProperties(appUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsApiFp(configuration)
    return {
        /**
         * Retrieves the App for the given API key.
         * @summary Get App For Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppForApiKey(options?: AxiosRequestConfig): AxiosPromise<AppWithModelUpdatesInfo> {
            return localVarFp.getAppForApiKey(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an App\'s properties: description, weights and policies.
         * @summary Update App And Models
         * @param {AppsApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties(requestParameters: AppsApiUpdatePropertiesRequest, options?: AxiosRequestConfig): AxiosPromise<AppWithModelUpdatesInfo> {
            return localVarFp.updateProperties(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateProperties operation in AppsApi.
 * @export
 * @interface AppsApiUpdatePropertiesRequest
 */
export type AppsApiUpdatePropertiesRequest = {
    
} & AppUpdate

/**
 * AppsApiGenerated - object-oriented interface
 * @export
 * @class AppsApiGenerated
 * @extends {BaseAPI}
 */
export class AppsApiGenerated extends BaseAPI {
    /**
     * Retrieves the App for the given API key.
     * @summary Get App For Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getAppForApiKey(options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getAppForApiKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an App\'s properties: description, weights and policies.
     * @summary Update App And Models
     * @param {AppsApiUpdatePropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public updateProperties(requestParameters: AppsApiUpdatePropertiesRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).updateProperties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
